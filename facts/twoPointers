1) Motivation Problem: Given a sorted array  A, having N integers. You need to find any pair(i,j) having sum as given number X.
   Constraints:  Array A contains about 105 integers with each having values around 109.

bool f(lli sum) {
    int l = 0, r = n-1; //two pointers
    while ( l <= r ) {
       if ( A[l] + A[r] == sum ) return 1;
       else if ( A[l] + A[r] > sum ) r--;
       else l++;
    }
    return 0;
}

Overall complexity of the above solution is O(N).

2) Motivation Problem: Given two sorted arrays A and B, each having length N and M respectively. Form a new sorted merged 
array having values of both the arrays in sorted format.
   Constraints: Array A and  B contains about 105 integers, each having value around 109.

void merge (int n, int m) {
    int l1 = l2 = k = 0;
    int ans[MAX];
    while (l1 < n && l2 < m) {
        if (v1[l1] <= v2[l2]) ans[k++] = v1[l1++];
        else ans[k++] = v2[l2++];
    }
    while (l1 < n) ans[k++] = v1[l1++];
    while (l2 < m) ans[k++] = v2[l2++];
    return ans;
}

Motivation Problem: Given an array having N integers, find the contiguous subarray having sum as great as possible, but not 
greater than M. For details on the statement, refer the problem link
